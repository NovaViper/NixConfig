:DOC-CONFIG:
# Tangle by default to config.el, which is the most common case
#+PROPERTY: header-args:emacs-lisp :tangle config.el
#+PROPERTY: header-args :mkdirp yes :comments no
:END:

#+TITLE: Doom Emacs Configuration
#+AUTHOR: Nova Leary
#+EMAIL: coder.nova99@mailbox.org


This is my Doom Emacs configuration. From this org file, all of the necessary Doom Emacs configuration files are generated.

* Table of Contents :TOC_3:noexport:
- [[#references][References]]
- [[#doom-config-file-overview][Doom Config File Overview]]
  - [[#config-file-headers][Config File Headers]]
  - [[#customized-variables][Customized Variables]]
- [[#doom-modules][Doom Modules]]
- [[#doom-packages][Doom Packages]]
- [[#general-configuration][General Configuration]]
  - [[#directory-variables][Directory Variables]]
  - [[#user-information][User Information]]
  - [[#emojify-fix][Emojify Fix]]
  - [[#visual-session-and-window-settings][Visual, Session, and Window Settings]]
    - [[#font-setup][Font setup]]
    - [[#line-number-modes][Line Number Modes]]
    - [[#doom-theme][Doom Theme]]
    - [[#word-wrap][Word Wrap]]
    - [[#word-count][Word Count]]
    - [[#beacon][Beacon]]
    - [[#workspace-emacsclient-fix][Workspace Emacsclient Fix]]
    - [[#rainbow-mode][Rainbow Mode]]
    - [[#modeline][Modeline]]
    - [[#window-splitting][Window Splitting]]
    - [[#global-auto-revert][Global Auto Revert]]
    - [[#enable-auto-save-and-backup][Enable Auto Save and Backup]]
    - [[#enable-tmux-integration][Enable tmux integration]]
    - [[#centaur-tabs][Centaur Tabs]]
  - [[#gpg-encryption-and-password-configuration][GPG Encryption and Password Configuration]]
  - [[#key-bindings][Key Bindings]]
- [[#org-mode][Org Mode]]
  - [[#org-visual-settings][Org Visual Settings]]
  - [[#general-org-configuration][General Org Configuration]]
  - [[#org-notifications][Org Notifications]]
  - [[#org-super-agenda][Org Super Agenda]]
- [[#coding-configurations][Coding Configurations]]
  - [[#projectile-configurations][Projectile Configurations]]
  - [[#black-formatter-configuration][Black Formatter Configuration]]
    - [[#global-config-file][Global Config File]]
  - [[#numpydoc-configuration][Numpydoc Configuration]]
  - [[#dap-mode][Dap-Mode]]
  - [[#lsp-mode-configurations][LSP Mode Configurations]]
- [[#mu4e-configuration][MU4E Configuration]]
    - [[#load-additional-mu4e-commands][Load Additional Mu4e Commands]]
    - [[#main-configurations][Main Configurations]]
    - [[#mail-contexts][Mail Contexts]]

* References
- [[https://github.com/zzamboni/dot-doom][ZZamboni's doom.org file]] - For primary configuration for Doom Emacs
- [[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org][SystemCrafter's Emacs.org file]] - For help separating configurations and describing them, also took many configurations from here
- [[https://tecosaur.github.io/emacs-config/config.html][Tecosaur's emacs configuration blog]] - For extra modline functions and daemon extras
- [[https://jherrlin.github.io/posts/emacs-mu4e/][jherrlin's mu4e tutorial]] - For the new mu4e `pass` functions and improvements
- [[https://github.com/hlissner/doom-emacs-private/blob/master/config.el#L80-L85][Hlissner's Doom Config]] - Advanced configurations for Emacs everywhere, indents and more
- [[https://github.com/danielfleischer/mu4easy][danielfleischer's mu4e configuration]] - Mu4e context and Gmail refile macros, mbsyncrc configuration
* Doom Config File Overview
Doom Emacs uses three config files:
- [[file:init.el][init.el]] defines which of the existing Doom [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#modules][modules]] are loaded. A Doom module is a bundle of packages, configuration and commands, organized into a unit that can be toggled easily from this file.
- [[file:packages.el][packages.el]] defines which [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#package-management][packages]] should be installed, beyond those that are installed and loaded as part of the enabled modules.
- [[file:config.el][config.el]] contains all [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#configuring-doom][custom configurations]] and code.
There are other files that can be loaded, but theses are the main ones. The load order of different files is [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#load-order][defined depending on the type of session]] being started.
** Config File Headers
We start by simply defining the standard headers used by the three files. These headers come from the initial files generated by ~doom install~ and contain either some Emacs-LISP relevant indicators like ~lexical-binding~, or instructions about the contents of the file.

#+html: <details><summary>init.el</summary>
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
#+end_src
#+html: </details>

#+html: <details><summary>packages.el</summary>
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/radian-software/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see radian-software/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)
#+end_src
#+html: </details>

#+html: <details><summary>config.el</summary>
#+begin_src emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at config.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-unicode-font' -- for unicode glyphs
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!


;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src
#+html: </details>

** Customized Variables
Doom [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#configure][does not recommend the Emacs ~customize~ mechanism]]:
#+begin_quote
Note: do not use ~M-x customize~ or the customize API in general. Doom is
designed to be configured programmatically from your config.el, which can
conflict with Customize's way of modifying variables.

If you're concerned about ~defcustom~ setters, Doom has a ~setq!~ macro that
will trigger them.
#+end_quote

All necessary settings are therefore set by hand as part of this configuration file. The only exceptions are "safe variable" and "safe theme" settings, which are automatically saved by Emacs in ~custom.el~, but this is OK as they don't conflict with anything else from the config.
* Doom Modules
This code is written to ~init.el~ to select which modules to load.
#+begin_src emacs-lisp :tangle init.el
(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       (vertico +icons)           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       indent-guides     ; highlighted indent columns
       ligatures         ; ligatures and symbols to make your code pretty again
       minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       tabs              ; a tab bar for Emacs
       (treemacs +lsp)          ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +icons)             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       (ibuffer +icons)         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       (spell +flyspell) ; tasing you for misspelling mispelling
       grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       (debugger +lsp)          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       (lookup +dictionary              ; navigate your code and its documentation
               +docsets)
       (lsp +peek)               ; M-x vscode
       (magit +forge)             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb               ; creating color strings
       taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       tmux              ; an API for interacting with tmux
       tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       (tty +osc)               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       (json +lsp)              ; At least it ain't XML
       (java +lsp)       ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       (lua +lsp               ; one-based indices? one-based indices
            +tree-sitter)
       (markdown +grip)          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +dragndrop
            +pomodoro
            +pretty
            +journal)               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python +pyright            ; beautiful is better than ugly
               +lsp)
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       (sh +fish                ; she sells {ba,z,fi}sh shells on the C xor
           +lsp)
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       (web +lsp)               ; the tubes
       (yaml +lsp              ; JSON, but readable
             +tree-sitter)
       ;;zig               ; C, but simpler

       :email
       (:if (executable-find "mu") (mu4e +org +gmail))
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       calendar
       ;;emms
       everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens))
#+end_src

* Doom Packages
Installs several packages I need,
- =evil-tutor=: Teaches how to use evil
- =command-log-mode=: Show event history and command history of some or all buffers.
- =org-super-agenda=: Makes org-agenda really really fancy
- =org-wild-notifier=: Customize notifications for org tasks and events
- =visual-fill-column=: It turns the view on the left into the view on the right, without changing the contents of the file
- =org-mime=:
- =exec-path-from-shell=: Ensure environment variables inside Emacs look the same as in the user's shell.
- =platformio-mode=: Integrates PlatformIO build tools into Emacs
- =beacon=: Highlights the cursor location when window scrolling
- =numpydoc=: Automatically insert NumPy style docstrings for Python functions
- =mixed-pitched=: Enables mixing fixed-pitch (also known as fixed-width or monospace) and variable-pitch (AKA “proportional”) fonts
- =dap-mode=: Brings rich debugging capabilities to Emacs via the [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]].
#+begin_src emacs-lisp :tangle packages.el
(package! evil-tutor)
(package! command-log-mode)
(package! org-super-agenda)
(package! org-wild-notifier)
(package! org-appear)
;(package! org-mime)
(package! visual-fill-column)
(package! exec-path-from-shell)
(package! platformio-mode)
(package! beacon)
(package! numpydoc)
(package! mixed-pitch)
(package! dap-mode)
#+end_src

* General Configuration
** Directory Variables
Declares paths for various functions
#+begin_src emacs-lisp
(setq doom_directory "~/.config/doom/")
(setq mail_directory "~/.cache/")
#+end_src

** User Information
My user information
#+begin_src emacs-lisp
(setq user-full-name "Nova Leary"
      user-mail-address "coder.nova99@mailbox.org")
#+end_src

** Emojify Fix
Fixes infinite loop issue with Emojify downloading not working and going into infinite looping
#+begin_src emacs-lisp
(setq emojify-download-emojis-p t)
#+end_src

** Visual, Session, and Window Settings
*** Font setup
Makes my fonts larger, depending on what system it's on. Yadm automatically picks the machine specific configurations and renames the files into ~fonts.el~. Use the mixed-pitch package to make monospace fonts appear correctly for code blocks, tables and such in Org mode. The ~nova/org-font-setup~ function configures various text faces to tweak the sizes of headings and makes list hyphens with dots.
#+begin_src emacs-lisp
(load (concat doom_directory "fonts.el"))

(add-hook! 'org-mode-hook #'mixed-pitch-mode)
(add-hook! 'org-mode-hook #'solaire-mode)
(setq mixed-pitch-set-height t)
(setq mixed-pitch-variable-pitch-cursor nil)

(defun nova/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font org-mode-font :weight 'bold :height (cdr face))))
#+end_src

*** Line Number Modes
Determines what modes should display line numbers be disabled in
#+begin_src emacs-lisp
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook
                vterm-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

*** Doom Theme
Set the theme for Doom Emacs to Dracula theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-dracula)
#+end_src

*** Word Wrap
Make all text files word warp enabled by default
#+begin_src emacs-lisp
(+global-word-wrap-mode +1)
#+end_src

*** Word Count
Show word count on modeline
#+begin_src emacs-lisp
(setq doom-modeline-enable-word-count t)
#+end_src

*** Beacon
Enable beacon mode for blinking cursor
#+begin_src emacs-lisp
(use-package! beacon
  :config
  (beacon-mode 1)
  (setq beacon-color "#bd93f9"))
#+end_src

*** Workspace Emacsclient Fix
This fixes [[https://github.com/hlissner/doom-emacs/issues/5876][my issue]] where enabling the workspace plugin would cause emacsclient to create new workspaces when exiting out of Emacs
#+begin_src emacs-lisp
(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override "main"))
#+end_src

*** Rainbow Mode
~hl-line-mode~ overrides the color highlighting of ~rainbow-mode~, limiting the use of that plugin and on-site color changes using ~kurecolor~. This line will automatically disable ~hl-line-mode~ only when ~rainbow-mode~ is active
#+begin_src emacs-lisp
(add-hook! 'rainbow-mode-hook
  (hl-line-mode (if rainbow-mode -1 +1)))
#+end_src

*** Modeline
**** Time
Enable time display on modeline
#+begin_src emacs-lisp
(display-time-mode 1)
#+end_src

**** Battery Display
Display battery mode in modeline for laptop configuration
#+begin_src emacs-lisp
(unless (string-match-p "^Power N/A" (battery))
  (display-battery-mode 1))
#+end_src

*** Window Splitting
Focus on new windows after splitting and enable prompt for window splitting
#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)

(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (counsel-switch-buffer))
#+end_src

*** Global Auto Revert
A buffer can get out of sync with respect to its visited file on disk if that file is changed by another program. To keep it up to date, you can enable Auto Revert mode by typing M-x auto-revert-mode, or you can set it to be turned on globally with ‘global-auto-revert-mode’.  I have also turned on Global Auto Revert on non-file buffers, which is especially useful for ~dired~ buffers.
#+begin_src emacs-lisp
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-use-notify nil)
#+end_src

*** Enable Auto Save and Backup
Re-enable auto-save, creation of lock files, and backup files
#+begin_src emacs-lisp
(setq auto-save-default t)
(setq create-lockfiles t)
(setq make-backup-files t)
#+end_src

*** Enable tmux integration
#+begin_src emacs-lisp
(use-package! clipetty
  :ensure t
  :hook (after-init . global-clipetty-mode))
#+end_src

*** Centaur Tabs
Several changes made to centaur tabs to make it more usable.
- Set selected style to have an over outline, which also fixes [[https://github.com/doomemacs/doomemacs/issues/6647][issue]] where centaur tabs doesn't work properly when using emacsclient
- Use slant tab bar style
- Make the tabs larger to be easier to see
- To gray out icons for the unselected tabs
- Enable navigation buttons in tab bar
- Group your tabs by Projectile’s project.
#+begin_src emacs-lisp
(after! centaur-tabs
  (setq centaur-tabs-set-bar 'over
        centaur-tabs-style "slant"
        centaur-tabs-height 32
        centaur-tabs-gray-out-icons 'buffer
        centaur-tabs-show-navigation-buttons t)
(centaur-tabs-group-by-projectile-project))
#+end_src

** GPG Encryption and Password Configuration
This tells emacs where I've placed my .authinfo.gpg file is and sets up password look up for mu4e. For Yubikey usage, the passphrase Emacs prompts for is the yubikey pin!
#+begin_src emacs-lisp
(setq auth-sources '("~/.authinfo.gpg")
      auth-source-cache-expiry 7200) ; default is 7200 (2h)

(use-package! epa-file
  :config
  (setq epa-file-encrypt-to '("coder.nova99@mailbox.org")
        epa-file-select-keys t
        epa-pinentry-mode 'loopback))
#+end_src

** Key Bindings
All keybindings are evil-mode since I'm using Doom Emacs. So I have some specific keybindings I want to use
#+begin_src emacs-lisp
;; Set custom shortcut for org-capture
(define-key global-map (kbd "C-c j")
  (lambda () (interactive) (org-capture nil "jj")))

(map! :leader
      :desc "Create Numpydoc"
        "C-n" #'numpydoc-generate)
(define-key evil-normal-state-map (kbd "g t") 'centaur-tabs-forward)
(define-key evil-normal-state-map (kbd "g T") 'centaur-tabs-backward)
#+end_src
* Org Mode
** Org Visual Settings
This section configures the appearance and different mode settings for org.
- Auto indents text according to outline structure
- Enables variable-pitch default-face mode
- Enables visual line mode
#+begin_src emacs-lisp
(defun nova/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))
#+end_src

Adds hooks for org-mode, Also disables [[https://code.orgmode.org/bzg/org-mode/src/master/etc/ORG-NEWS#L323][electric-mode]], which is now respected by Org and which creates some confusing indentation sometimes.
#+begin_src emacs-lisp
(add-hook! org-mode (nova/org-mode-setup))
(add-hook! org-mode (nova/org-font-setup))
(add-hook! org-mode (electric-indent-local-mode -1))
(add-hook! org-mode :append #'org-appear-mode)
#+end_src

I use [[https://codeberg.org/joostkremers/visual-fill-column][visual-fill-column]] to center ~org-mode~ buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.
#+begin_src emacs-lisp
;; Configure visual fill mode size for Org-mode
(defun nova/org-mode-visual-fill ()
  (setq visual-fill-column-width 160
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(add-hook! org-mode (nova/org-mode-visual-fill))
#+end_src

** General Org Configuration
This section contains the basic configuration for ~org-mode~ plus the configuration for Org agendas (and ~org-super-agenda~) and capture templates.
#+begin_src emacs-lisp
(after! org
  ;; Enable saving org buffers after refiling them
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
  ;; Define default org directories for each specific org mode
  (setq org-directory "~/Sync/org/"
        org-roam-directory "~/Sync/org/"
        org-default-notes-file (concat org-directory "refile.org")
        org-agenda-directory (concat org-directory "agenda/")
        org-agenda-files (doom-files-in org-agenda-directory :match "\\.org$")

        ;; Hide org markup indicators
        org-hide-emphasis-markers t

        ;; Make LaTeX special symbols appear as pretty Unicode characters instead of plain text
        org-pretty-entities t

        ;;; Make org mode show inline images when loading a new org file
        org-startup-with-inline-images t

        ;; Set the actual image width in org mode to 300px when inlining them
        org-image-actual-width '(300)

        ;;Sets colors for emphasis characters
        org-emphasis-alist
        '(("*" (bold :foreground "#ffb86c")) ;Bold
          ("/" (italic :foreground "#ff79c6")) ;Italic
          ("_" (underline :foreground "#f1fa8c")) ;Underline
          ("=" (:background "#44475a" :foreground "#50fa7b")) ;Verbatim
          ("~" (:background "#6272a4" :foreground "#8be9fd")) ;Code
          ("+" (:strike-through t :foreground "#ff5555"))) ;Strikethrough

        ;; Custom keywords for different projects
        ;;(org-agenda-prefix-format "%b")
        org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
          (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")
          (sequence "STUDY(s)" "|" "FIN(f)")
          (sequence "TASK(T)")
          (sequence "MEETING(m)"))

        ;; Refile target locations for school planner
        org-refile-targets
        '(("archive.org" :maxlevel . 3)
          ("tasks.org" :maxlevel . 1)
          ("exams.org" :maxlevel . 1)
          ("quizzes.org" :maxlevel . 1)
          ("assignments.org" :maxlevel . 1))

        ;; Org Agenda Tags
        org-tag-alist
        '((:startgroup)
          ; Put mutually exclusive tags here
          (:endgroup)
          ("@errand" . ?E)
          ("@home" . ?H)
          ("@work" . ?W)
          ("agenda" . ?a)
          ("planning" . ?p)
          ("publish" . ?P)
          ("batch" . ?b)
          ("note" . ?n)
          ("idea" . ?i))

        ;; Custom org-capture templates for creating new entries
        org-capture-templates
        `(("t" "Tasks")
          ("tt" "Task" entry (file+olp ,(concat org-agenda-directory "tasks.org") "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
          ("a" "School Assignments")
          ("aa" "Assignments" entry
           (file ,(concat org-agenda-directory "school/assignments.org"))
           "* TODO %?\n DEADLINE: %T\n"
           :jump-to-captured 1
           :empty-lines 1)
          ("ae" "Exams" entry
           (file ,(concat org-agenda-directory "school/exams.org"))
           "* %? %T\n"
           :jump-to-captured 1
           :empty-lines 1)
          ("aq" "Quizzes" entry
           (file ,(concat org-agenda-directory "school/quizzes.org"))
           "* %? %T\n"
           :jump-to-captured 1
           :empty-lines 1)

          ("m" "Metrics Capture")
          ("mw" "Weight" table-line (file+headline ,(concat org-agenda-directory "tasks.org") "Weight")
           "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t))))

;; Make main TODO entry set to done when all subentries are DONE
(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(add-hook 'org-after-todo-statistics-hook #'org-summary-todo)
#+end_src

** Org Notifications
Configure Org notifications
#+begin_src emacs-lisp
;; Configure Org notifications for Planner
(use-package! org-wild-notifier
  :after org
  :config
  (setq org-wild-notifier-keyword-whitelist '()
        org-wild-notifier-keyword-blacklist '("DONE")
        org-wild-notifier--alert-severity "medium"
        org-wild-notifier-notification-title "<< ORG AENGDA >>"
        org-wild-notifier-alert-time '(5 10 30 60 120 1440)
        alert-default-style 'libnotify
        alert-libnotify-additional-args'("-h" "string:desktop-entry:emacs"))
  (org-wild-notifier-mode 1))
#+end_src

** Org Super Agenda
Setup for ~org-super-agenda~
#+begin_src emacs-lisp
(use-package! org-super-agenda
  :after org
  :config
  (org-super-agenda-mode 1)
  (setq org-agenda-custom-commands
        '(("z" "Super zaen view"
           ((agenda "" ((org-agenda-span 'day)
                        (org-super-agenda-groups
                         '((:name "Today"
                            :time-grid t
                            :date today
                            :todo "TODAY"
                            :scheduled today
                            :order 1)))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:name "Next to do"
                             :todo "NEXT"
                             :order 1)
                            (:name "Important"
                             :tag "Important"
                             :priority "A"
                             :order 6)
                            (:name "Due Today"
                             :deadline today
                             :order 2)
                            (:name "Due Soon"
                             :deadline future
                             :order 8)
                            (:name "Overdue"
                             :deadline past
                             :order 7)
                            (:name "Assignments"
                             :tag "Assignment"
                             :order 10)
                            (:name "Issues"
                             :tag "Issue"
                             :order 12)
                            (:name "Projects"
                             :tag "Project"
                             :order 14)
                            (:name "Emacs"
                             :tag "Emacs"
                             :order 13)
                            (:name "Research"
                             :tag "Research"
                             :order 15)
                            (:name "To read"
                             :tag "Read"
                             :order 30)
                            (:name "Waiting"
                             :todo "WAITING"
                             :order 20)
                            (:name "trivial"
                             :priority<= "C"
                             :tag ("Trivial" "Unimportant")
                             :todo ("SOMEDAY" )
                             :order 90)
                            (:discard (:tag ("Chore" "Routine" "Daily"))))))))))))
#+end_src

* Coding Configurations
These configurations are for my coding workflow
** Projectile Configurations
Configures projectile
#+begin_src emacs-lisp
(setq projectile-project-search-path '(("~/Documents/Projects" .  4)))
#+end_src

** Black Formatter Configuration
*** Global Config File
Creates configuration file for Black formatter. Increases the max line length
#+begin_src emacs-lisp :tangle ~/.config/black/pyproject.tool
[tool.black]
line-length = 90
#+end_src

** Numpydoc Configuration
Creates configuration for Numpydoc. Prompts for numpydoc insertion style
#+begin_src emacs-lisp
(use-package! numpydoc
  :after lsp-mode
  :init
  (setq numpydoc-insertion-style 'prompt))
#+end_src

** Dap-Mode
Configures dap mode configurations for different languages
#+begin_src emacs-lisp
;; Configure dap mode debuggers
(setq dap-python-debugger 'debugpy)
;(setq lsp-csharp-server-path (executable-find "omnisharp"))
;(setq dap-netcore-install-dir "/usr/bin")
;; Change dap-python debugger terminal
;(setq dap-python-terminal "kitty +open ")

(use-package! dap-mode
  :after lsp-mode
  :init
  (dap-tooltip-mode 1)
  (tooltip-mode 1)
  ;(require 'dap-netcore)
)

;(add-hook! 'csharp-mode-hook 'dotnet-mode)
#+end_src

** LSP Mode Configurations
#+begin_src emacs-lisp
;(setq lsp-clients-lua-language-server-bin "/usr/bin/lua-language-server"
;      lsp-clients-lua-language-server-main-location "/usr/lib/lua-language-server/main.lua")
#+end_src

* MU4E Configuration
This configures mu and mu4e (mu 4 emacs). These configs are ONLY loaded when ~mu~ is installed on the system (useful for NixOS config)
*** Load Additional Mu4e Commands
#+begin_src emacs-lisp :tangle (if (executable-find "mu") "yes" "no")
;(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
;(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
(load (concat doom_directory "mu4e-contrib.el"))
#+end_src

*** Main Configurations
#+begin_src emacs-lisp :tangle (if (executable-find "mu") "yes" "no")
(use-package! mu4e
:defer t
:config
;; This is set to 't' to avoid mail syncing issues when using mbsync
(setq mu4e-change-filenames-when-moving t

      ;; Refresh mail using isync every 10 minutes
      mu4e-get-mail-command "mbsync -a"
      mu4e-update-interval  (* 10 60)
      mu4e-maildir (concat mail_directory "mail")

      ;; Make sure plain text mails flow correctly for recipients
      mu4e-compose-format-flowed t

      ;; Configure the function to use for sending mail
      message-send-mail-function 'smtpmail-send-it
      mu4e-context-policy 'pick-first
      mu4e-compose-context-policy 'always-ask
      mu4e-headers-date-format "%d-%m-%Y %H:%M"
      mu4e-alert-email-notification-types '(count)))

;;Make Mu4e trash without the trashed flag
(setf (alist-get 'trash mu4e-marks)
      '(:char ("d" . "▼")
              :prompt "dtrash"
              :dyn-target (lambda (target msg) (mu4e-get-trash-folder msg))
              ;; Here's the main difference to the regular trash mark, no +T
              ;; before -N so the message is not marked as IMAP-deleted:
              :action (lambda (docid msg target)
                        (mu4e~proc-move docid
                                        (mu4e~mark-check-target target) "+S-u-N"))))

;;Make Mu4e refile based on provider
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Refile-dwim       depends on provider
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq df/refile-dwim
      '(:char ("r" . "▶")
        :prompt "refile"
        :dyn-target (lambda (target msg) (mu4e-get-refile-folder msg))
        :action (lambda (docid msg target)
                  (let ((maildir (mu4e-message-field msg :maildir)))
                    (if (string-match-p "Google\\|gmail\\|BRCC\\|brcc" maildir)
                        (mu4e~proc-remove docid)
                      (mu4e~proc-move docid (mu4e~mark-check-target target) "+S-u-N"))))))
(setf (alist-get 'refile mu4e-marks) df/refile-dwim)
#+end_src

*** Mail Contexts
Declares mu4e contexts for my accounts
#+begin_src emacs-lisp :tangle (if (executable-find "mu") "yes" "no")
(load (concat doom_directory "mu4e-accounts.el"))
#+end_src
